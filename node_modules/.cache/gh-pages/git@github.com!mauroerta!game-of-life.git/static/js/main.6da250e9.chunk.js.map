{"version":3,"sources":["utils/isLooping.ts","utils/cellIsAlive.ts","utils/getNeighbors.ts","state/hooks.ts","state/actions.ts","state/constants.ts","state/reducers.ts","components/atoms/Cell/Cell.tsx","components/atoms/Button/Button.tsx","components/atoms/IconButton/IconButton.tsx","components/atoms/PlayButton/PlayButton.tsx","components/molecules/Grid/Grid.tsx","components/organisms/SideBar/SideBar.tsx","components/organisms/Gol/Gol.tsx","App.tsx","serviceWorker.ts","index.tsx","state/selectors.ts","state/index.ts"],"names":["filterAlives","current","isLooping","history","map","cells","filter","length","last","secondLast","thirdLast","cellIsAlive","index","cols","rows","isAlive","alives","neighbors","left","right","bottom","top","topLeft","topRight","bottomLeft","bottomRight","getNeighbors","Object","values","curr","getAliveNeighbors","useGol","dispatch","useDispatch","useSelector","selectCells","selectCols","selectRows","step","selectStep","play","selectIsPlaying","getIsLopping","nextStep","useCallback","nextStepAction","random","randomAction","reset","resetAction","setPlay","playAction","toggleCell","setCellAction","setCells","setCellsAction","createAction","INITIAL_STATE","Array","from","DEFAULT_ROWS","isPlaying","gofReducer","createReducer","type","state","nextState","_","slice","fill","Math","payload","newCells","cell","currentIndex","Cell","alive","width","children","onClick","backgroundColor","useMemo","color","style","minHeight","padding","role","DEFAULT_STYLE","border","outline","textAlign","Button","buttonStyle","fontSize","labelStyle","display","IconButton","icon","label","PlayButton","emoji","Grid","cellWidth","renderItem","key","renderedCells","useEffect","interval","setInterval","clearInterval","flexWrap","sidebarStyle","margin","height","flexDirection","justifyContent","SideBar","isLoopingIcon","isLoopingLabel","flex","gridStyle","Gol","store","configureStore","reducer","devTools","process","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","getState","createSelector"],"mappings":"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","file":"static/js/main.6da250e9.chunk.js","sourcesContent":["const filterAlives = (current: boolean) => !!current;\n\nexport function isLooping(history: boolean[][]): boolean {\n  const [last, secondLast, thirdLast] = history.map(\n    (cells) => cells.filter(filterAlives).length\n  );\n  if (!secondLast) {\n    return false;\n  }\n\n  if (!thirdLast) {\n    return last === secondLast;\n  }\n\n  return last === thirdLast;\n}\n","import { getNeighbors } from \"./getNeighbors\";\n\ntype CellIsAliveParams = {\n  index: number;\n  cells: boolean[];\n  cols: number;\n  rows: number;\n};\n\nexport function getAliveNeighbors({\n  index,\n  cells,\n  cols,\n  rows,\n}: CellIsAliveParams): number {\n  const neighbors = getNeighbors({ index, cols, rows });\n  const conditions = Object.values(neighbors);\n  const alives = conditions.filter(([curr, condition]) => {\n    return condition ? cells[curr] : false;\n  });\n\n  return alives.length;\n}\n\nexport function cellIsAlive({\n  index,\n  cells,\n  cols,\n  rows,\n}: CellIsAliveParams): boolean {\n  const isAlive = !!cells[index];\n  const alives = getAliveNeighbors({ index, cells, cols, rows });\n\n  if (!isAlive) {\n    return alives === 3;\n  }\n\n  return alives === 2 || alives === 3;\n}\n","type ConditionTuple = [number, boolean];\n\ntype GetNeighborsParams = {\n  index: number;\n  cols: number;\n  rows: number;\n};\n\nexport function getNeighbors({ index, cols, rows }: GetNeighborsParams) {\n  const left: ConditionTuple = [index - 1, index > cols % rows];\n  const right: ConditionTuple = [index + 1, index % cols < cols];\n  const top: ConditionTuple = [index - cols, index > cols];\n  const bottom: ConditionTuple = [index + cols, index < cols * (rows - 1)];\n  const topLeft: ConditionTuple = [index - cols - 1, index % cols > 1];\n  const topRight: ConditionTuple = [index - cols + 1, index % cols < cols - 1];\n  const bottomLeft: ConditionTuple = [\n    index + cols - 1,\n    index % (cols * rows) < cols * (rows - 1),\n  ];\n  const bottomRight: ConditionTuple = [\n    index + cols + 1,\n    index % (cols * rows) < cols * (rows - 2),\n  ];\n\n  return {\n    left,\n    right,\n    bottom,\n    top,\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight,\n  };\n}\n","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  nextStep as nextStepAction,\n  playAction,\n  resetAction,\n  randomAction,\n  setCellAction,\n  setCellsAction,\n} from \"./actions\";\nimport {\n  selectCells,\n  selectCols,\n  selectRows,\n  selectStep,\n  getIsLopping,\n  selectIsPlaying,\n} from \"./selectors\";\n\nexport function useGol() {\n  const dispatch = useDispatch();\n  const cells = useSelector(selectCells);\n  const cols = useSelector(selectCols);\n  const rows = useSelector(selectRows);\n  const step = useSelector(selectStep);\n  const play = useSelector(selectIsPlaying);\n  const isLooping = useSelector(getIsLopping);\n\n  const nextStep = useCallback(() => {\n    dispatch(nextStepAction());\n  }, [dispatch]);\n\n  const random = useCallback(() => {\n    dispatch(randomAction());\n  }, [dispatch]);\n\n  const reset = useCallback(() => {\n    dispatch(resetAction());\n  }, [dispatch]);\n\n  const setPlay = useCallback(() => {\n    dispatch(playAction());\n  }, [dispatch]);\n\n  const toggleCell = useCallback(\n    (index: number) => {\n      dispatch(setCellAction({ index }));\n    },\n    [dispatch]\n  );\n\n  const setCells = useCallback(\n    (cells: boolean[]) => {\n      dispatch(setCellsAction({ cells }));\n    },\n    [dispatch]\n  );\n\n  return {\n    cells,\n    play,\n    cols,\n    rows,\n    step,\n    isLooping,\n    reset,\n    random,\n    setPlay,\n    setCells,\n    nextStep,\n    toggleCell,\n  };\n}\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { SetCellPayload, SetCellsPayload } from \"./types\";\n\nexport const nextStep = createAction(\"gol/NEXT_STEP\");\nexport const resetAction = createAction(\"gol/RESET\");\nexport const randomAction = createAction(\"gol/RANDOM\");\nexport const playAction = createAction(\"gol/TOGGLE_PLAY\");\nexport const setCellAction = createAction<SetCellPayload>(\"gol/SET_CELL\");\nexport const setCellsAction = createAction<SetCellsPayload>(\"gol/SET_CELLS\");\n","export const DEFAULT_COLS = 100;\nexport const DEFAULT_ROWS = 50;\n\nexport const INITIAL_STATE = {\n  cells: Array.from<boolean>({ length: DEFAULT_ROWS * DEFAULT_COLS }).map(\n    () => false\n  ),\n  history: [],\n  rows: DEFAULT_ROWS,\n  cols: DEFAULT_COLS,\n  step: 0,\n  isPlaying: false,\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  nextStep,\n  playAction,\n  resetAction,\n  randomAction,\n  setCellAction,\n  setCellsAction,\n} from \"./actions\";\nimport { MainState, SetCellPayload, SetCellsPayload } from \"./types\";\nimport { INITIAL_STATE } from \"./constants\";\nimport { cellIsAlive } from \"../utils\";\n\nconst nextStepCase = (state: MainState): MainState => {\n  const { cells, cols, rows, step } = state;\n  const nextState = cells.map((_, index) => {\n    return cellIsAlive({ index, cells, cols, rows });\n  });\n  return {\n    ...state,\n    cells: nextState,\n    history: [nextState, ...state.history].slice(0, 3),\n    step: step + 1,\n  };\n};\n\nconst randomCase = (state: MainState): MainState => {\n  const { cols, rows } = state;\n  const cells = Array.from<boolean>({ length: cols * rows }).map(\n    () => Math.random() < 0.3\n  );\n\n  return {\n    cells,\n    history: [],\n    rows,\n    cols,\n    step: 0,\n    isPlaying: false,\n  };\n};\n\nconst resetCase = (state: MainState): MainState => {\n  const { cols, rows } = state;\n  const cells = Array.from<boolean>({ length: cols * rows }).fill(false);\n\n  return {\n    cells,\n    history: [],\n    rows,\n    cols,\n    step: 0,\n    isPlaying: false,\n  };\n};\n\nconst playCase = (state: MainState): MainState => {\n  return {\n    ...state,\n    isPlaying: !state.isPlaying,\n  };\n};\n\nconst setCellCase = (\n  state: MainState,\n  { payload }: { payload: SetCellPayload }\n): MainState => {\n  const { index } = payload;\n  const { cells } = state;\n  const newCells = cells.map((cell, currentIndex) => {\n    return currentIndex === index ? !cell : cell;\n  });\n\n  return {\n    ...state,\n    cells: newCells,\n  };\n};\n\nconst setCellsCase = (\n  state: MainState,\n  { payload }: { payload: SetCellsPayload }\n): MainState => {\n  const { cells } = payload;\n  const { cols, rows } = state;\n  return {\n    ...state,\n    cells: cells.slice(0, cols * rows),\n    step: 0,\n  };\n};\n\nexport const gofReducer = createReducer<MainState>(INITIAL_STATE, {\n  [nextStep.type]: nextStepCase,\n  [playAction.type]: playCase,\n  [resetAction.type]: resetCase,\n  [randomAction.type]: randomCase,\n  [setCellAction.type]: setCellCase,\n  [setCellsAction.type]: setCellsCase,\n});\n","import React, { useMemo } from \"react\";\n\ntype Props = {\n  width: string;\n  alive?: boolean;\n  onClick: () => void;\n};\n\nexport const Cell: React.FC<Props> = ({\n  alive = false,\n  width,\n  children,\n  onClick,\n}) => {\n  const backgroundColor = useMemo(() => (alive ? \"#34495e\" : \"#ecf0f1\"), [\n    alive,\n  ]);\n  const color = useMemo(() => (alive ? \"#ecf0f1\" : \"#34495e\"), [alive]);\n\n  return (\n    <div\n      style={{\n        width,\n        minHeight: \"16px\",\n        padding: 0,\n        backgroundColor,\n        color,\n      }}\n      role=\"button\"\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\n\ntype Props = {\n  style?: React.CSSProperties;\n  onClick?: () => void;\n};\n\nconst DEFAULT_STYLE: React.CSSProperties = {\n  backgroundColor: \"transparent\",\n  border: \"none\",\n  outline: \"none\",\n  textAlign: \"center\",\n};\n\nexport const Button: React.FC<Props> = ({ children, style = {}, onClick }) => {\n  return (\n    <button onClick={onClick} style={{ ...DEFAULT_STYLE, ...style }}>\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"../Button\";\n\ntype Props = {\n  icon: string;\n  label: string;\n  onClick?: () => void;\n};\n\nconst buttonStyle: React.CSSProperties = {\n  width: \"100px\",\n  fontSize: \"40px\",\n};\n\nconst labelStyle: React.CSSProperties = {\n  display: \"block\",\n  width: \"100%\",\n  fontSize: \"20px\",\n  textAlign: \"center\",\n};\n\nexport const IconButton: React.FC<Props> = ({ icon, label, onClick }) => {\n  return (\n    <Button onClick={onClick} style={buttonStyle}>\n      {icon}\n      <span style={labelStyle}>{label}</span>\n    </Button>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { IconButton } from \"../IconButton\";\n\ntype Props = {\n  play: boolean;\n  onClick: () => void;\n};\n\nexport const PlayButton: React.FC<Props> = ({ play, onClick }) => {\n  const emoji = useMemo(() => (play ? `⏸️` : `▶️`), [play]);\n  const label = useMemo(() => (play ? `Pause` : `Play`), [play]);\n  return <IconButton icon={emoji} label={label} onClick={onClick} />;\n};\n","import React, { useCallback, useMemo, useEffect } from \"react\";\nimport { Cell } from \"../../atoms\";\n\ntype Props = {\n  play: boolean;\n  cols: number;\n  rows: number;\n  cells: boolean[];\n  nextStep: () => void;\n  toggleCell: (index: number) => void;\n};\n\nexport const Grid: React.FC<Props> = ({\n  play,\n  cells,\n  cols,\n  rows,\n  nextStep,\n  toggleCell,\n}) => {\n  const cellWidth = useMemo(() => `${100 / cols}%`, [cols]);\n\n  const renderItem = useCallback(\n    (alive: boolean, index: number) => {\n      return (\n        <Cell\n          key={index}\n          alive={alive}\n          width={cellWidth}\n          onClick={() => toggleCell(index)}\n        />\n      );\n    },\n    [cellWidth, toggleCell]\n  );\n\n  const renderedCells = useMemo(() => cells.map(renderItem), [\n    cells,\n    renderItem,\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      nextStep();\n    }, 100);\n\n    if (!play) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [cols, nextStep, play, rows]);\n\n  return (\n    <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{renderedCells}</div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { PlayButton, IconButton } from \"../../atoms\";\nimport { useGol } from \"../../../state\";\n\nconst sidebarStyle: React.CSSProperties = {\n  display: \"flex\",\n  margin: \"auto\",\n  height: \"100%\",\n  textAlign: \"center\",\n  flexDirection: \"column\",\n  justifyContent: \"space-evenly\",\n};\n\nexport function SideBar() {\n  const { step, play, isLooping, reset, random, setPlay } = useGol();\n\n  const isLoopingIcon = useMemo(() => (isLooping ? `😵` : `👌`), [isLooping]);\n  const isLoopingLabel = useMemo(() => (isLooping ? `Loop` : `Ok`), [\n    isLooping,\n  ]);\n\n  return (\n    <div style={sidebarStyle}>\n      <IconButton icon={`🔀`} label=\"Random\" onClick={random} />\n      <PlayButton play={play} onClick={setPlay} />\n      <IconButton icon={`🆑`} label=\"Clear\" onClick={reset} />\n      <IconButton icon={`${step}`} label=\"Step\" />\n      <IconButton icon={isLoopingIcon} label={isLoopingLabel} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useGol } from \"../../../state\";\nimport { Grid } from \"../../molecules\";\nimport { SideBar } from \"../SideBar\";\n\nconst sidebarStyle: React.CSSProperties = {\n  flex: 0.05,\n};\nconst gridStyle: React.CSSProperties = {\n  flex: 0.95,\n};\n\nexport function Gol() {\n  const { play, cells, cols, rows, nextStep, toggleCell } = useGol();\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={sidebarStyle}>\n        <SideBar />\n      </div>\n      <div style={gridStyle}>\n        <Grid\n          play={play}\n          cells={cells}\n          cols={cols}\n          rows={rows}\n          nextStep={nextStep}\n          toggleCell={toggleCell}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Gol } from \"./components\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { gofReducer } from \"./state\";\n\nconst store = configureStore({\n  reducer: gofReducer,\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Gol />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { MainState } from \"./types\";\nimport { isLooping } from \"../utils\";\n\nfunction getState(state: MainState) {\n  return state;\n}\n\nexport const selectCells = createSelector(\n  getState,\n  (state: MainState): boolean[] => state.cells\n);\n\nexport const selectCols = createSelector(\n  getState,\n  (state: MainState): number => state.cols\n);\n\nexport const selectRows = createSelector(\n  getState,\n  (state: MainState): number => state.cols\n);\n\nexport const selectStep = createSelector(\n  getState,\n  (state: MainState): number => state.step\n);\n\nexport const selectIsPlaying = createSelector(\n  getState,\n  (state: MainState): boolean => state.isPlaying\n);\n\nexport const getIsLopping = createSelector(\n  getState,\n  (state: MainState): boolean => {\n    const { history } = state;\n    return isLooping(history);\n  }\n);\n","export * from \"./hooks\";\nexport * from \"./types\";\nexport * from \"./actions\";\nexport * from \"./reducers\";\nexport * from \"./selectors\";\n"],"sourceRoot":""}